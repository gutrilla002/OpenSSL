=pod

=head1 NAME

EVP_PKEY-HSS, EVP_KEYMGMT-HSS, HSS
- EVP_PKEY HSS keytype and algorithm support

=head1 DESCRIPTION

The B<HSS> keytype is implemented in OpenSSL's default and FIPS providers.
Due to the stateful nature of HSS/LMS keys only signature verification is
supported in OpenSSL. This means that only HSS public keys are supported.

=head2 Common HSS parameters

HSS public keys consists of the depth of the tree as well as an XDR encoding
of the key (i.e. it is not ANS1 format), 
The following parameters are used by EVP_PKEY_fromdata() and by the
HSS keymanager for import and export.

=over 4

=item "l" (B<OSSL_PKEY_PARAM_HSS_L>) <unsigned integer>

The number of layers of LMS trees in the hierachy range from 1 to 8.

=item "encoded-pub-key" (B<OSSL_PKEY_PARAM_ENCODED_PUBLIC_KEY>) <octet string>

When used for loading an encoded HSS public key using EVP_PKEY_fromdata() the
public key encoding contains the "l" value.
Within the HSS keymanager when used for import and export this encoding is just
the LMS public key encoding with no "l" value.

=back

=head1 CONFORMING TO

=over 4

=item RFC 8554

Leighton-Micali Hash-Based Signatures

=item NIST SP 800-208

Recommendation for Stateful Hash-Based Signature Schemes

=item CSNA 2.0

Commercial National Security Algorithm Suite

=back

=head1 EXAMPLES

NOTE error checking has been omitted in these examples

An B<EVP_PKEY> context can be obtained by calling:

    EVP_PKEY_CTX *ctx = EVP_PKEY_CTX_new_from_name(NULL, "HSS", NULL);

An B<HSS> "pkey" can be loaded simply like this:

    EVP_PKEY *pkey = NULL;
    OSSL_DECODER_CTX *dctx = NULL;
    int selection = 0;

    dctx = OSSL_DECODER_CTX_new_for_pkey(&pkey, NULL, NULL,
                                         "HSS, selection, libctx, propq);
    ret = OSSL_DECODER_from_bio(dctx, bio);
    OSSL_DECODER_CTX_free(dctx);

or a "pkey" can be loaded from raw encoded "data" of size "datalen" like this:

    EVP_PKEY *key = NULL;
    OSSL_PARAM params[2];

    params[0] = 
        OSSL_PARAM_construct_octet_string(OSSL_PKEY_PARAM_ENCODED_PUBLIC_KEY,
                                          (unsigned char *)data, datalen);
    params[1] = OSSL_PARAM_construct_end();
    ret = EVP_PKEY_fromdata_init(ctx)
    ret = EVP_PKEY_fromdata(ctx, &key, EVP_PKEY_PUBLIC_KEY, params);

=head1 SEE ALSO

L<EVP_SIGNATURE-HSS(7)>,
L<EVP_KEYMGMT(3)>,
L<EVP_PKEY(3)>,
L<provider-keymgmt(7)>

=head1 COPYRIGHT

Copyright 2023 The OpenSSL Project Authors. All Rights Reserved.

Licensed under the Apache License 2.0 (the "License").  You may not use
this file except in compliance with the License.  You can obtain a copy
in the file LICENSE in the source distribution or at
L<https://www.openssl.org/source/license.html>.

=cut
